{"version":3,"file":"PublisherGoogleStorage.umd.js","sources":["../src/PublisherGoogleStorage.ts"],"sourcesContent":["import { Storage } from \"@google-cloud/storage\";\nimport PublisherBase, {\n  PublisherOptions\n} from \"@electron-forge/publisher-base\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { file } from \"tmp-promise\";\n\nexport interface PublisherConfig {\n  /** Google Cloud project ID */\n  projectId?: string;\n  /** Google Cloud storage bucket */\n  bucket: string;\n  /** Alternative download URL if using CNAME over Cloud Storage domain. */\n  storageUrl?: string;\n  /** Make uploaded artifacts and manifest public (default: false) */\n  public?: boolean;\n}\n\nexport default class PublisherGoogleStorage {\n  config: PublisherConfig;\n  providedPlatforms?: string[];\n\n  constructor(config: PublisherConfig, providedPlatforms?: string[]) {\n    this.config = config;\n    this.providedPlatforms = providedPlatforms;\n  }\n\n  get platforms() {\n    return this.providedPlatforms || [\"win32\", \"linux\", \"darwin\", \"mas\"];\n  }\n\n  get name() {\n    return \"googleStorage\";\n  }\n\n  async publish({ makeResults }: PublisherOptions) {\n    const { config } = this;\n    const artifacts: {\n      path: string;\n      keyPrefix: string;\n      platform: string;\n      arch: string;\n    }[] = [];\n\n    for (const makeResult of makeResults) {\n      artifacts.push(\n        ...makeResult.artifacts.map(artifact => ({\n          path: artifact,\n          platform: makeResult.platform,\n          arch: makeResult.arch\n        }))\n      );\n    }\n\n    const storage = new Storage({\n      projectId: config ? config.projectId : undefined\n    });\n\n    if (!config || !config.bucket) {\n      throw 'In order to publish to Google Cloud Storage you must set the \"googleCloudStorage.bucket\" property in your forge config. See the docs for more info'; // eslint-disable-line\n    }\n    const bucket = storage.bucket(config.bucket);\n    const version = makeResults[0].packageJSON.version;\n    let downloadPath = \"\";\n\n    // Upload artifacts - Manifest only supports one for now\n    await Promise.all(\n      artifacts.map(async artifact => {\n        const destination = `${artifact.platform}/${path.basename(\n          artifact.path\n        )}`;\n        await bucket.upload(artifact.path, {\n          gzip: true,\n          destination,\n          resumable: false,\n          metadata: {\n            \"cache-control\": \"public, max-age=31536000\" // 1 year\n          },\n          public: config.public\n        });\n\n        const storageUrl =\n          config.storageUrl || `https://storage.googleapis.com/${bucket.name}`;\n        downloadPath = `${storageUrl}/${destination}`;\n\n        // Upload manifest file\n        const manifestContent = JSON.stringify({\n          version: version,\n          url: downloadPath,\n          publishedAt: new Date().toISOString()\n        });\n        const tmpFile = await file();\n        fs.writeFileSync(tmpFile.path, manifestContent);\n        await bucket.upload(tmpFile.path, {\n          gzip: true,\n          destination: `${artifact.platform}/manifest.json`,\n          contentType: \"application/json\",\n          resumable: false,\n          metadata: {\n            \"cache-control\": \"public, max-age=60\" // 1 minute\n          },\n          public: config.public\n        });\n\n        tmpFile.cleanup();\n      })\n    );\n  }\n}\n"],"names":["PublisherGoogleStorage","constructor","config","providedPlatforms","platforms","this","name","publish","artifacts","const","makeResult","push","map","artifact","path","platform","arch","makeResults","storage","Storage","projectId","undefined","bucket","version","packageJSON","Promise","all","destination","upload","gzip","resumable","metadata","public","manifestContent","JSON","stringify","url","storageUrl","publishedAt","Date","toISOString","file","tmpFile","fs","contentType","cleanup"],"mappings":"sXAmBqBA,EAInBC,SAAYC,EAAyBC,QAC9BD,OAASA,OACTC,kBAAoBA,mEAGvBC,gCACKC,KAAKF,mBAAqB,CAAC,QAAS,QAAS,SAAU,UAG5DG,0BACK,6BAGHC,sDACeF,YACbG,EAKA,gBAEDC,IAAMC,OACTF,EAAUG,aACLD,EAAWF,UAAUI,aAAIC,UAC1BC,KAAMD,EACNE,SAAUL,EAAWK,SACrBC,KAAMN,EAAWM,gBALEC,0BAUnBC,EAAU,IAAIC,UAAQ,CAC1BC,UAAWlB,EAASA,EAAOkB,eAAYC,QAGpCnB,IAAWA,EAAOoB,YACf,yJAEFA,EAASJ,EAAQI,OAAOpB,EAAOoB,QAC/BC,EAAUN,EAAY,GAAGO,YAAYD,+BAIrCE,QAAQC,IACZlB,EAAUI,aAAUC,WACZc,EAAiBd,eAAqBC,WAC1CD,EAASC,6BAELQ,EAAOM,OAAOf,EAASC,KAAM,CACjCe,MAAM,cACNF,EACAG,WAAW,EACXC,SAAU,iBACS,4BAEnBC,OAAQ9B,EAAO8B,8BAQXC,EAAkBC,KAAKC,UAAU,CACrCZ,QAASA,EACTa,KANAlC,EAAOmC,8CAAgDf,YACzBK,EAM9BW,aAAa,IAAIC,MAAOC,uCAEJC,wBAAhBC,UACNC,gBAAiBD,EAAQ5B,KAAMmB,mBACzBX,EAAOM,OAAOc,EAAQ5B,KAAM,CAChCe,MAAM,EACNF,YAAgBd,4BAChB+B,YAAa,mBACbd,WAAW,EACXC,SAAU,iBACS,sBAEnBC,OAAQ9B,EAAO8B,0BAGjBU,EAAQG"}